/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.test;

import java.io.File;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FileUtils;
import org.eclipse.jetty.util.log.Log;
import org.eclipse.jgit.lib.PersonIdent;

/**
 * @author mocleiri
 * 
 * Filters the PersonIdent part of the commit aswell as the commit message.
 * 
 * We add in the GitUser if known (loaded from the file generated by LookupSVNUsers)
 * 
 * We replace wicketstuff.org email addresses with users.sourceforge.net (this was caused by the revision of the
 * repo initially checked out.
 */
public class DefaultCommitFilter implements ICommitFilter {

	private Map<String, GitUser> svnUserNameToGitUserMap = new LinkedHashMap<String, GitUser>();

	/**
	 * @param svnToGitUsernameFile
	 * @throws IOException
	 * 
	 */
	public DefaultCommitFilter(String svnToGitUsernameFile)
			throws IOException {

		List<String> lines = FileUtils.readLines(
				new File(svnToGitUsernameFile), "UTF-8");

		for (String line : lines) {

			if (line.trim().length() == 0 || line.trim().startsWith("#"))
				continue; // skip blank lines and comments
			
			String[] parts = line.trim().split("=");

			String svnUserName = parts[0].trim();

			String gitUser = parts[1].trim();

			String[] gitParts = gitUser.split("<");

			String gitUserName = gitParts[0];

			String gitEmail = gitParts[1].trim().substring(0,
					gitParts[1].trim().length() - 1);

			svnUserNameToGitUserMap.put(svnUserName, new GitUser(svnUserName,
					gitUserName, gitEmail));

		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.test.IPersonIdentFilter#filterPersonIdent(org.eclipse.jgit.lib.
	 * PersonIdent)
	 */
	@Override
	public PersonIdent filterPersonIdent(PersonIdent personIdent) {

		String name = personIdent.getName();

		// check if there is a git user mapped to this user;
		GitUser gitUser = svnUserNameToGitUserMap.get(name);

		if (gitUser != null) {
			return new PersonIdent(gitUser.getGitUser(), gitUser.getGitEmail(),
					personIdent.getWhen(), personIdent.getTimeZone());
		} else {
			
			// for wicketstuff we did a partial replace of the email addresses we decided to copy the wicketpit approach of Martin Funk and use the 
			// @users.sourceforge.net syntax
			if (personIdent.getEmailAddress().contains("@wicketstuff.org")) {
				return new PersonIdent(personIdent.getName(), personIdent.getEmailAddress().replaceFirst("@wicketstuff.org", "@users.sourceforge.net"), personIdent.getWhen(), personIdent.getTimeZone());
			}
			return personIdent;
		}
	}

	/* (non-Javadoc)
	 * @see org.test.ICommitFilter#filterCommitMessage(java.lang.String)
	 */
	@Override
	public String filterCommitMessage(String commit) {
		
		return commit.replaceFirst("git-svn-log:.*$", "");
	}

	
}
